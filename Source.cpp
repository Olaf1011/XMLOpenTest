#include "Header.h"

#include <sstream>
#include <algorithm>
#include <cassert>
#include <iostream>
#include <iterator>
#include <string>
#include <windows.h>

#include "tinyxml2.h"


using namespace tinyxml2;

std::vector<std::string> string_split(std::string s, const char delimiter)
{
    size_t start=0;
    size_t end=s.find_first_of(delimiter);
    
    std::vector<std::string> output;
    
    while (end <= std::string::npos)
    {
	    output.emplace_back(s.substr(start, end-start));

	    if (end == std::string::npos)
	    	break;

    	start=end+1;
    	end = s.find_first_of(delimiter, start);
    }
    
    return output;
}

static std::pair<float, float> Split(std::string& combinedString)
{
	std::istringstream iss(combinedString);
	std::vector<std::string> result;
	while (iss.good())
	{
		std::string y;
		std::getline(iss, y, ',');
		result.push_back(y);
	}
	return std::make_pair(std::stof(result[0]), std::stof(result[1]));
}

int ImportData::operator()()
{
	tinyxml2::XMLDocument XmlData;
	XmlData.LoadFile("ExportedData.xml");
	XMLNode* pRoot = XmlData.FirstChild();
	//Check if file is loaded correctly
	if (pRoot == nullptr)
		return XML_ERROR_FILE_READ_ERROR;


	XMLElement* sets = pRoot->FirstChildElement("Set");
	if (sets == nullptr)
		return XML_ERROR_PARSING_ELEMENT;

	LARGE_INTEGER qpc_freq;
	QueryPerformanceFrequency(&qpc_freq);

	// Convert timer frequency to floating point milliseconds
	volatile auto timer_multiplier = (double)qpc_freq.QuadPart;

	LARGE_INTEGER qpc_begin;
	QueryPerformanceCounter(&qpc_begin);



	std::vector<std::pair<float, float>> result;
	while (sets != nullptr)
	{
		result.clear();
		std::istringstream iss(sets->FirstChildElement("Coordinates")->GetText());
		std::vector<std::string>* basicStrings = new std::vector<std::string>((std::istream_iterator<std::string>(iss)),
			std::istream_iterator<std::string>());

		std::transform(basicStrings->begin(), basicStrings->end(),
			std::back_inserter(result), Split);

		sets = sets->NextSiblingElement();

		mResult.push_back(result);
	}

	LARGE_INTEGER qpc_end;
	QueryPerformanceCounter(&qpc_end);

	
	volatile auto t = (double)(qpc_end.QuadPart - qpc_begin.QuadPart) / timer_multiplier;
	
	std::cout << t << std::endl;
	return XML_SUCCESS;
}

int main()
{
	ImportData ID;
	assert(ID() == XML_SUCCESS);
	system("pause");
}
